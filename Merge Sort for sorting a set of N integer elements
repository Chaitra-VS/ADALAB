#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
                merge(arr, l, m, r);
    }
}

int main() {
    int sizes[] = {10, 100, 1000, 10000};
    int num_sizes = sizeof(sizes) / sizeof(sizes[0]);
    
    for (int i = 0; i < num_sizes; ++i) {
        int N = sizes[i];
        int arr[N];
 
        for (int j = 0; j < N; ++j) {
            arr[j] = rand();
        }
    
        clock_t start_time = clock();
        
        mergeSort(arr, 0, N - 1);
        
        clock_t end_time = clock();
        double total_time = (double)(end_time - start_time) / CLOCKS_PER_SEC;
        
        printf("Time taken to sort %d elements: %f seconds\n", N, total_time);
    }
    
    return 0;
}
